settype col: movelab_annotation type: Map
unnest col: movelab_annotation keys: 'edited_user_notes', 'photo_html', 'tiger_certainty_category', 'aegypti_certainty_category', 'score', 'classification', 'site_certainty_category' pluck: false markLineage: false
splitpatterns col: photo_html type: on on: '\" target'
drop col: photo_html2 action: Drop
splitpatterns col: photo_html1 type: on on: 'href=\"'
drop col: photo_html2 action: Drop
replacepatterns col: photo_html3 with: 'http:\/\/webserver.mosquitoalert.com\/media' on: '\/media'
settype col: movelab_annotation_euro type: Map
unnest col: movelab_annotation_euro keys: 'class_name','class_label','class_id','class_value' pluck: false markLineage: false
rename type: manual mapping: [version_UUID,'observation.projectObservationUID']
rename type: manual mapping: [creation_time,'observation.resultCategoryObservation.phenomenonTime']
drop col: creation_date action: Drop
drop col: creation_day_since_launch action: Drop
drop col: creation_year action: Drop
drop col: creation_month action: Drop
Delete site_cat
derive type: single value: {observation.resultCategoryObservation.phenomenonTime} as: 'observation.resultCategoryObservation.phenomenonTime.copy'
move col: {observation.resultCategoryObservation.phenomenonTime.copy} position: after after: {observation.resultCategoryObservation.phenomenonTime}
rename type: manual mapping: [{observation.resultCategoryObservation.phenomenonTime.copy},'observation.resultCategoryObservation.resultTime']
derive type: single value: {observation.resultCategoryObservation.resultTime} as: 'observation_resultCategoryObservation_resultTime_copy'
move col: observation_resultCategoryObservation_resultTime_copy position: after after: {observation.resultCategoryObservation.resultTime}
rename type: manual mapping: [observation_resultCategoryObservation_resultTime_copy,'observation.resultCategoryObservation.submitTime']
derive type: single value: MERGE(['{\"Type\":\"', type, '\",', '\"Indentified by Human\":\"', class_name, '\",', '\"Identified by Machine\":\"\"}'], '') as: 'SOmething'
rename type: manual mapping: [SOmething,'observation_resultCategoryObservation_result']
move col: observation_resultCategoryObservation_result position: after after: {observation.resultCategoryObservation.resultTime}
drop col: type action: Drop
rename type: manual mapping: [lat,'location.locationDetails.mobileProperties.latitude']
rename type: manual mapping: [lon,'location.locationDetails.mobileProperties.longitude']
derive type: single value: IF(ISMISSING([photo_html3]), false, true) as: 'observation_image_imageStatus'
rename type: manual mapping: [photo_html3,'observation.image.imageResult']
rename type: manual mapping: [observation_resultCategoryObservation_result,'observation.resultCategoryObservation.result']
rename type: manual mapping: [observation_image_imageStatus,'observation.image.imageStatus']
derive type: single value: MERGE(['{\"Tiger Certainty\":\"',tiger_certainty_category,'\",\"Aegypti Certainty\":\"',aegypti_certainty_category,'\"}'], '') as: 'observation_context_parameters'
derive type: single value: 'CC0' as: 'omProcess.license.licenseName'
derive type: single value: 'http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/' as: 'omProcess.license.licenseURI'
rename type: manual mapping: [observation_context_parameters,'observation.context.parameters']
derive type: single value: 'This data set has been created through the efforts of the Mosquito Alert team and the thousands of citizen scientists who have volunteered their energy and contributed reports on the Mosquito Alert platform. We ask that you give attribution to the Mosquito Alert Community if you use this data in any publications.' as: 'omProcess.license.licenseAttributionSource'
derive type: single value: 'Agust√≠ Escobar Rubies, & Mosquito Alert.  (2021).  Mosquito Alert Data. Zenodo. DOI: 10.5281\/zenodo.597466' as: 'omProcess.license.licenseAttributionAggregator'
derive type: single value: 'Sensor' as: 'omProcess.processType'
derive type: single value: 'http:\/\/www.mosquitoalert.com\/en\/project\/what-is-mosquito-alert\/' as: 'omProcess.processReference'
derive type: single value: 'true' as: 'omProcess.resultQuality.validationStatus'
derive type: single value: 'Human expert validation' as: 'omProcess.resultQuality.validationMethod'
derive type: single value: IF(tiger_certainty_category == 1, true, IF(tiger_certainty_category == -3, true, IF(aegypti_certainty_category == 1, true, IF(aegypti_certainty_category == 3, true, false)))) as: 'omProcess.resultQuality.validationResult'
derive type: single value: {omProcess.resultQuality.validationResult} as: 'omProcess.resultQuality.validationResult_copy'
move col: {omProcess.resultQuality.validationResult_copy} position: after after: {omProcess.resultQuality.validationResult}
derive type: single value: IF(tiger_certainty_category == 1, 'Research', IF(tiger_certainty_category == -3, 'Research', IF(aegypti_certainty_category == 1, 'Research', IF(aegypti_certainty_category == 3, 'Research', 'Casual')))) as: 'omProcess.resultQuality.qualityGrade'
derive type: single value: '' as: 'observedProperty.name'
derive type: single value: 'Whether a species is observed at a location, a breeding site is documented, or bites are reported' as: 'observedProperty.description'
derive type: single value: 'http:\/\/www.mosquitoalert.com\/en\/project\/envia-datos\/' as: 'observedProperty.definition'
derive type: single value: {observation.projectObservationUID} as: 'observation.projectObservationUID_copy'
move col: {observation.projectObservationUID_copy} position: after after: {observation.projectObservationUID}
rename type: manual mapping: [{observation.projectObservationUID_copy},'sensor.name']
derive type: single value: MERGE(['Anonymous cell phone user:',{sensor.name}], '') as: 'sensor.description'
derive type: single value: 'Varies' as: 'sensor.encodingType'
derive type: single value: 'Anonymous location' as: 'location.name'
derive type: single value: 'location.name' as: 'location.description'
derive type: single value: 'GeoJSON Point' as: 'location.encodingType'
derive type: single value: 'sensor.name' as: 'thing.name'
derive type: single value: 'sensor.description' as: 'thing.description'
derive type: single value: 'location.name' as: 'featureOfInterest.name'
derive type: single value: 'location.description' as: 'featureOfInterest.description'
derive type: single value: 'GeoJSON Point' as: 'featureOfInterest.encodingType'
derive type: single value: 'latitude, longitude' as: 'featureOfInterest.location'
derive type: single value: 'Citizen science data on mosquitoes from Mosquito Alert with additional automated ID' as: 'title'
derive type: single value: 'Data is generated from the Mosquito Alert database' as: 'description'
derive type: single value: MERGE([{sensor.name},'-mosquito species occurrence data from user cell phone']) as: 'dataStream.name'
derive type: single value: 'All species occurrence, site, or bite observations from a particular user taken with a sensor' as: 'dataStream.description'
derive type: single value: 'category observation' as: 'dataStream.observationType'
derive type: single value: '{\"Type\":\"Lifecycle Phase\",\"Identified by Human\":\"Class and genus or species if verified from image\",\"Identified by Machine\":\"Genus and species if mosquito is flagged as a target invasive or vector by ML system\"}' as: 'dataStream.unitOfCategory'
move col: title position: before before: {dataStream.unitOfCategory}
move col: description, {dataStream.name}, {dataStream.description}, {dataStream.observationType}, {dataStream.unitOfCategory}, {observation.projectObservationUID}, {observation.resultCategoryObservation.phenomenonTime}, {observation.resultCategoryObservation.resultTime}, {observation.resultCategoryObservation.result}, {observation.resultCategoryObservation.submitTime}, {observation.image.imageStatus}, {observation.image.imageResult}, {observation.context.parameters}, {omProcess.license.licenseName}, {omProcess.license.licenseURI}, {omProcess.license.licenseAttributionSource}, {omProcess.license.licenseAttributionAggregator}, {omProcess.processType}, {omProcess.processReference}, {omProcess.resultQuality.validationStatus}, {omProcess.resultQuality.validationMethod} position: after after: title
drop col: {omProcess.resultQuality.validationResult_copy} action: Drop
move col: {omProcess.resultQuality.validationResult}, {omProcess.resultQuality.qualityGrade}, {observedProperty.name}, {observedProperty.description}, {observedProperty.definition}, {sensor.name}, {sensor.description}, {sensor.encodingType}, {location.name}, {location.description}, {location.encodingType}, {location.locationDetails.mobileProperties.latitude}, {location.locationDetails.mobileProperties.longitude}, {thing.name}, {thing.description}, {featureOfInterest.name}, {featureOfInterest.description}, {featureOfInterest.encodingType}, {featureOfInterest.location} position: after after: {omProcess.resultQuality.validationMethod}
drop col: movelab_annotation,edited_user_notes action: Drop
drop col: tiger_certainty_category, aegypti_certainty_category, score, classification, site_certainty_category, movelab_annotation_euro, class_name, class_label, class_id, class_value, tiger_responses, tiger_responses_text, site_responses, site_responses_text, tigaprob_cat, visible, latest_version, n_photos, final_expert_status_text, responses, cached_visible, point, country, session action: Drop
settype col: {observation.resultCategoryObservation.submitTime} datetimeType: 'Datetime','mm-dd-yy hh:mm:ss','mm*dd*yy*HH:MM:SSX' type: Datetime
settype col: {observation.resultCategoryObservation.submitTime} datetimeType: 'Datetime','mm-dd-yy','mm*dd*yyyy' type: Datetime
settype col: {observation.resultCategoryObservation.submitTime} type: String
splitpatterns col: {observation.resultCategoryObservation.submitTime} type: on on: '.'
drop col: {observation.resultCategoryObservation.submitTime2} action: Drop
sort order: {observation.resultCategoryObservation.submitTime1}
sort order: -{observation.resultCategoryObservation.submitTime1}
rename type: manual mapping: [{observation.resultCategoryObservation.submitTime1},'observation.resultCategoryObservation.submitTime']
splitpatterns col: {observation.resultCategoryObservation.phenomenonTime} type: on on: '.'
drop col: {observation.resultCategoryObservation.phenomenonTime2} action: Drop
rename type: manual mapping: [{observation.resultCategoryObservation.phenomenonTime1},'observation.resultCategoryObservation.phenomenonTime']
Keep rows  where MATCHES([MONTH({observation.resultCategoryObservation.submitTime})], MONTH(NOW('UTC')), true)
derive type: single value: 'Point' as: 'type'
derive type: single value: ARRAYCONCAT([[{location.locationDetails.mobileProperties.longitude}],[{location.locationDetails.mobileProperties.latitude}]]) as: 'coordinates'
replacepatterns col: coordinates with: '' on: '\"' global: true
derive type: single value: '{\"type\":\"Point\",\"coordinates\":' as: 'geometry'
derive type: single value: MERGE([geometry,coordinates]) as: 'g'
move col: type,coordinates,geometry,g position: after after: {featureOfInterest.location}
drop col: geometry action: Drop
rename type: manual mapping: [g,'geometry']
drop col: type action: Drop
derive type: single value: 'FeatureCollection' as: 'type'
move col: type position: after after: {featureOfInterest.location}
settype col: geometry type: Map
settype col: geometry type: String
derive type: single value: MERGE([geometry,'}'], '') as: 'geometry1'
drop col: geometry action: Drop
rename type: manual mapping: [geometry1,'geometry']
rename type: manual mapping: [{location.locationDetails.mobileProperties.latitude},'latitude']
rename type: manual mapping: [{location.locationDetails.mobileProperties.longitude},'longitude']
replacepatterns col: {observation.resultCategoryObservation.phenomenonTime},{observation.resultCategoryObservation.submitTime} with: '' on: 'Z'
rename type: manual mapping: [{dataStream.name},'dataStreamName']
rename type: manual mapping: [{dataStream.description},'dataStreamDescription']
rename type: manual mapping: [{dataStream.observationType},'dataStreamObsType']
rename type: manual mapping: [{dataStream.unitOfCategory},'dataStreamUniCategory']
rename type: manual mapping: [{observation.projectObservationUID},'observationProObsUID']
rename type: manual mapping: [{observation.resultCategoryObservation.phenomenonTime},'observationResCatObsPheTime']
rename type: manual mapping: [{observation.resultCategoryObservation.resultTime},'observationResCatObsResTime']
rename type: manual mapping: [{observation.resultCategoryObservation.result},'observationResCatObsResult']
rename type: manual mapping: [{observation.resultCategoryObservation.submitTime},'observationResCatObsSubTime']
rename type: manual mapping: [{observation.image.imageStatus},'observationImaImaResult']
rename type: manual mapping: [observationImaImaResult,'observationImaImaStatus']
rename type: manual mapping: [{observation.image.imageResult},'observationImaImaResult']
rename type: manual mapping: [{observation.context.parameters},'observationConParameters']
rename type: manual mapping: [{omProcess.license.licenseName},'omProcessLicLicName']
rename type: manual mapping: [{omProcess.license.licenseURI},'omProcessLicLicURI']
rename type: manual mapping: [{omProcess.license.licenseAttributionSource},'omProcessLicLicAttSource']
rename type: manual mapping: [{omProcess.license.licenseAttributionAggregator},'omProcessLicLicAttAggregator']
rename type: manual mapping: [{omProcess.processType},'omPrcoessProType']
rename type: manual mapping: [{omProcess.processReference},'omProcessProReference']
rename type: manual mapping: [{omProcess.resultQuality.validationStatus},'omPrcoessResQuaValStatus']
rename type: manual mapping: [{omProcess.resultQuality.validationMethod},'omPrcoessResQuaValMethod']
rename type: manual mapping: [{omProcess.resultQuality.validationResult},'omPrcoessResQuaValResult']
rename type: manual mapping: [{omProcess.resultQuality.qualityGrade},'omPrcoessResQuaQuaGrade']
rename type: manual mapping: [{observedProperty.name},'observedProName']
rename type: manual mapping: [{observedProperty.description},'observedProDescription']
rename type: manual mapping: [{observedProperty.definition},'observedProDefinition']
rename type: manual mapping: [{sensor.name},'sensorName']
rename type: manual mapping: [{sensor.description},'sensorDescription']
rename type: manual mapping: [{sensor.encodingType},'sensorEncType']
rename type: manual mapping: [{location.name},'locationName']
rename type: manual mapping: [{location.description},'locationDescription']
rename type: manual mapping: [{location.encodingType},'locationEncType']
rename type: manual mapping: [{thing.name},'thingName']
rename type: manual mapping: [{thing.description},'thingDescription']
rename type: manual mapping: [{featureOfInterest.name},'featureIntName']
rename type: manual mapping: [{featureOfInterest.description},'featureIntDescription']
rename type: manual mapping: [{featureOfInterest.encodingType},'featureIntEncType']
rename type: manual mapping: [{featureOfInterest.location},'featureIntLocation']
unnest col: observationResCatObsResult keys: '[\"Identified by Machine\"]','[\"Indentified by Human\"]','Type' pluck: false markLineage: false
rename type: manual mapping: [Type1,'obsResCatObsResult_Type']
move col: obsResCatObsResult_Type,{Indentified by Human},{Identified by Machine} position: after after: observationResCatObsResult
unnest col: observationConParameters keys: '[\"Aegypti Certainty\"]','[\"Tiger Certainty\"]' pluck: false markLineage: false
splitpatterns col: observationResCatObsResTime type: on on: '.'
drop col: observationResCatObsResTime2 action: Drop
rename type: manual mapping: [observationResCatObsResTime1,'observationResCatObsResTime']
nest col: nuts_2,nuts_3,site_cat into: map as: 'misc'
derive type: single value: MERGE([sensorDescription,misc], ' \"misc\": ') as: 'column1'
drop col: sensorDescription action: Drop
rename type: manual mapping: [column1,'sensorDescription']
move col: sensorDescription position: after after: sensorName
drop col: observationConParameters action: Drop
nest col: {Aegypti Certainty},{Tiger Certainty},site_cat,nuts_3,nuts_2 into: map as: 'observationConParameters'
move col: observationConParameters position: after after: observationImaImaResult
drop col: site_cat,nuts_3,nuts_2 action: Drop
nest col: ia_filter_1,ia_filter_2 into: map as: 'misc 2'
drop col: ia_filter_1 action: Drop
drop col: ia_filter_2 action: Drop