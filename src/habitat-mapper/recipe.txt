derive type: single value: 'GLOBE Observer Mosquito Habitats' as: 'title'
derive type: single value: MERGE(['Moquito Habitats',' ',mhm_Userid]) as: 'dataStream.name'
derive type: single value: 'Sensor' as: 'dataStream.observationType'
rename type: manual mapping: [mhm_MeasuredAt,'observation.resultCategoryObservation.phenomenonTime']
rename type: manual mapping: [mhm_measuredDate,'observation.resultCategoryObservation.resultTime']
rename type: manual mapping: [mhm_WaterSourcePhotoUrls,'observation.resultCategoryObservation.result']
rename type: manual mapping: [mhm_createDate,'observation.resultCategoryObservation.submitTime']
derive type: single value: 'yes' as: 'observation.image.imageStatus'
nest col: mhm_elevation,mhm_WaterSource into: map as: 'observation.context.parameters'
derive type: single value: 'NA' as: 'omProcess.license.licenseName'
derive type: single value: 'https:\/\/www.globe.gov\/documents\/10157\/2592674\/GLOBE+Data+User+Guide_v1_final.pdf\/863a971d-95c5-4dd9-b75c-46713f019088' as: 'omProcess.license.licenseURI'
rename type: manual mapping: [mhm_Userid,'omProcess.license.licenseAttributionSource']
derive type: single value: MERGE(['User: ',{omProcess.license.licenseAttributionSource}]) as: 'column1'
drop col: {omProcess.license.licenseAttributionSource} action: Drop
rename type: manual mapping: [column1,'omProcess.license.licenseAttributionSource']
derive type: single value: 'Global Learning and Observations to Benefit the Environment (GLOBE)' as: 'omProcess.license.licenseAttributionAggregator'
derive type: single value: 'yes' as: 'omProcess.resultQuality.validationStatus'
derive type: single value: 'Our Validation method is as follows: 1) GLOBE Observer App has its own validators to ensure the requested data type matches the received value. 2) GLOBE Observer Team validates the photos to ensure they are useful and match the area where the photographer took the photo. 3) Our pre-processing algorithms ensure values entered are appropriate and reasonable. Our code also creates quality assurance flag to allow Users to better summarize the data.' as: 'omProcess.resultQuality.validationMethod'
derive type: single value: 'FALSE (Entries with their photos undergoing GLOBE\'s validation process will have a \'pending\' code for their photos. NOTE: Some entries\' photos will be listed as \'rejected\'. Photos that pass our validation process will include GLOBE\'s URL to that photo)' as: 'omProcess.resultQuality.validationResult'
derive type: single value: '\"GLOBE Observer Data Guide: https:\/\/www.globe.gov\/documents\/10157\/2592674\/GLOBE+Data+User+Guide_v1_final.pdf\/863a971d-95c5-4dd9-b75c-46713f019088 (Page 25)' as: 'omProcess.resultQuality.qualityDescription'
derive type: single value: 'research' as: 'omProcess.resultQuality.qualityGrade'
derive type: single value: 'Mosquito Habitats' as: 'observedProperty.name'
derive type: single value: 'Mosquito Habitats as documented by a photo' as: 'observedProperty.description'
derive type: single value: 'https:\/\/observer.globe.gov\/toolkit\/mosquito-habitat-mapper-toolkit' as: 'observedProperty.definition'
derive type: single value: 'NA' as: 'sensor.name'
derive type: single value: 'NA' as: 'sensor.description'
derive type: single value: 'NA' as: 'sensor.encodingType'
derive type: single value: 'NC' as: 'sensor.metadata'
rename type: manual mapping: [mhm_siteName,'location.name']
rename type: manual mapping: [mhm_siteId,'location.description']
derive type: single value: 'GeoJSON' as: 'location.encodingType'
rename type: manual mapping: [mhm_MGRSLatitude,'location.locationDetails.stationaryProperties.latitude']
rename type: manual mapping: [mhm_MGRSLongitude,'location.locationDetails.stationaryProperties.longitude']
derive type: single value: {omProcess.license.licenseAttributionSource} as: 'thing.name'
rename type: manual mapping: [mhm_organizationName,'thing.description']
rename type: manual mapping: [mhm_GlobeTeams,'thing.properties']
derive type: single value: {location.name} as: 'featureOfInterest.name'
derive type: single value: {location.description} as: 'featureOfInterest.description'
derive type: single value: 'GeoJSON' as: 'featureOfInterest.encodingType'
nest col: {location.locationDetails.stationaryProperties.latitude},{location.locationDetails.stationaryProperties.longitude} into: map as: 'featureOfInterest.feature'
derive type: single value: 'Mosquito Habitat, NA, NC' as: 'dataStream.unitOfCategory'
derive type: single value: MERGE(['All data on ',{observedProperty.Name},' from ',{sensor.Name}]) as: 'dataStream.description'
move col: {dataStream.unitOfCategory}, {observation.resultCategoryObservation.phenomenonTime}, {observation.resultCategoryObservation.resultTime}, {observation.resultCategoryObservation.result}, {observation.resultCategoryObservation.submitTime}, {observation.image.imageStatus}, {observation.context.parameters}, {omProcess.license.licenseName}, {omProcess.license.licenseURI}, {omProcess.license.licenseAttributionSource}, {omProcess.license.licenseAttributionAggregator}, {omProcess.resultQuality.validationStatus}, {omProcess.resultQuality.validationMethod}, {omProcess.resultQuality.validationResult}, {omProcess.resultQuality.qualityDescription}, {omProcess.resultQuality.qualityGrade}, {observedProperty.name}, {observedProperty.description}, {observedProperty.definition}, {sensor.name}, {sensor.description}, {sensor.encodingType}, {sensor.metadata}, {location.name}, {location.description}, {location.encodingType}, {location.locationDetails.stationaryProperties.latitude}, {location.locationDetails.stationaryProperties.longitude}, {thing.name}, {thing.description}, {thing.properties}, {featureOfInterest.name}, {featureOfInterest.description}, {featureOfInterest.encodingType} position: after after: {dataStream.unitOfCategory}
move col: {featureOfInterest.feature} position: after after: {featureOfInterest.encodingType}
move col: title,{dataStream.name},{dataStream.description},{dataStream.observationType} position: before before: {dataStream.unitOfCategory}
nest col: mhm_LarvaeCount,mhm_LarvaeCountMagnitude,mhm_LarvaeCountIsRangeFlag,mhm_LarvaFullBodyPhotoUrls into: map as: 'Larva Presence'
nest col: mhm_protocol, mhm_updateDate, mhm_publishDate, mhm_organizationId, mhm_countryName, mhm_countryCode, mhm_elevation, mhm_pid, mhm_ExtraData, mhm_BreedingGroundEliminated, mhm_AbdomenCloseupPhotoUrls, mhm_MeasurementElevation, mhm_MosquitoEggs, mhm_Genus, mhm_MosquitoEggCount, mhm_WaterSource, mhm_MosquitoAdults, mhm_Species, mhm_Comments, mhm_MosquitoPupae, mhm_DataSource, mhm_Latitude, mhm_LastIdentifyStage, mhm_Longitude, mhm_WaterSourceType, mhm_MosquitoHabitatMapperId, mhm_HasGenus, mhm_IsGenusOfInterest, mhm_IsWaterSourceContainer, mhm_HasWaterSource into: map as: 'raw context 1'
nest col: mhm_PhotoCount, mhm_RejectedCount, mhm_PendingCount, mhm_PhotoBitBinary, mhm_PhotoBitDecimal, mhm_SubCompletenessScore, mhm_CumulativeCompletenessScore into: map as: 'raw context 2'
settype col: {featureOfInterest.description} type: String
replacepatterns col: {thing.properties} with: '' on: `{start}"|"{end}` global: true
settype col: {thing.name} type: String
settype col: {location.description} type: Integer
settype col: {location.description} type: String
settype col: {omProcess.license.licenseAttributionSource} type: String
replacepatterns col: {omProcess.resultQuality.qualityDescription} with: '' on: `{start}"|"{end}` global: true
rename type: manual mapping: [{dataStream.name},'datastreamName']
rename type: manual mapping: [{dataStream.description},'datastreamDescription']
rename type: manual mapping: [{dataStream.observationType},'observationType']
rename type: manual mapping: [{dataStream.unitOfCategory},'unitOfCategory']
rename type: manual mapping: [{observation.resultCategoryObservation.phenomenonTime},'phenomenonTime']
rename type: manual mapping: [{observation.resultCategoryObservation.resultTime},'resultTime']
rename type: manual mapping: [{observation.resultCategoryObservation.result},'result']
rename type: manual mapping: [{observation.resultCategoryObservation.submitTime},'submitTime']
rename type: manual mapping: [{observation.image.imageStatus},'imageStatus']
rename type: manual mapping: [{observation.context.parameters},'context']
nest col: context,{Larva Presence},{raw context 1},{raw context 2} into: map as: 'parameters'
rename type: manual mapping: [{omProcess.license.licenseName},'licenseName']
rename type: manual mapping: [{omProcess.license.licenseURI},'licenseURI']
rename type: manual mapping: [{omProcess.license.licenseAttributionSource},'attributionDataSource']
rename type: manual mapping: [{omProcess.license.licenseAttributionAggregator},'attributionDataAggregator']
rename type: manual mapping: [{omProcess.resultQuality.validationStatus},'validationStatus']
rename type: manual mapping: [{omProcess.resultQuality.validationMethod},'validationMethod']
rename type: manual mapping: [{omProcess.resultQuality.validationResult},'validationResult']
rename type: manual mapping: [{omProcess.resultQuality.qualityDescription},'qualityDescription']
rename type: manual mapping: [{omProcess.resultQuality.qualityGrade},'qualityGrade']
rename type: manual mapping: [{observedProperty.name},'observedPropertyName']
rename type: manual mapping: [{observedProperty.description},'observedPropertyDescription']
rename type: manual mapping: [{observedProperty.definition},'observedPropertyDefinition']
rename type: manual mapping: [{sensor.name},'sensorName']
rename type: manual mapping: [{sensor.description},'sensorDescription']
rename type: manual mapping: [{sensor.encodingType},'sensorEncodingType']
rename type: manual mapping: [{sensor.metadata},'sensorMetadata']
rename type: manual mapping: [{location.name},'locationName']
rename type: manual mapping: [{location.description},'locationDescription']
rename type: manual mapping: [{location.encodingType},'locationEncodingType']
rename type: manual mapping: [{location.locationDetails.stationaryProperties.latitude},'latitude']
rename type: manual mapping: [{location.locationDetails.stationaryProperties.longitude},'longitude']
rename type: manual mapping: [{thing.name},'volunteerName']
rename type: manual mapping: [{thing.description},'volunteerDescription']
rename type: manual mapping: [{thing.properties},'volunteerProperties']
rename type: manual mapping: [{featureOfInterest.name},'featureName']
rename type: manual mapping: [{featureOfInterest.description},'featureDescription']
rename type: manual mapping: [{featureOfInterest.encodingType},'featureEncodingType']
rename type: manual mapping: [{featureOfInterest.feature},'featureLocation']
drop col: column2, mhm_protocol, mhm_updateDate, mhm_publishDate, mhm_organizationId, mhm_countryName, mhm_countryCode, mhm_elevation, mhm_pid, mhm_ExtraData, mhm_BreedingGroundEliminated, mhm_AbdomenCloseupPhotoUrls, mhm_MeasurementElevation, mhm_LarvaeCount, mhm_MosquitoEggs, mhm_Genus, mhm_MosquitoEggCount, mhm_WaterSource, mhm_MosquitoAdults, mhm_Species, mhm_Comments, mhm_MosquitoPupae, mhm_DataSource, mhm_LarvaFullBodyPhotoUrls, mhm_Latitude, mhm_LastIdentifyStage, mhm_WaterSourceType, mhm_Longitude, mhm_MosquitoHabitatMapperId, mhm_LarvaeCountMagnitude, mhm_LarvaeCountIsRangeFlag, mhm_HasGenus, mhm_IsGenusOfInterest, mhm_IsWaterSourceContainer, mhm_HasWaterSource, mhm_PhotoCount, mhm_RejectedCount, mhm_PendingCount, mhm_PhotoBitBinary, mhm_PhotoBitDecimal, mhm_SubCompletenessScore, mhm_CumulativeCompletenessScore action: Drop
derive type: single value: 'Point' as: 'type'
nest col: longitude,latitude into: array as: 'coordinates'
nest col: type,coordinates into: map as: 'geometry'
move col: type,coordinates,geometry position: after after: featureLocation
Keep rows  where MATCHES([YEAR(phenomenonTime)], YEAR(NOW('UTC')), true)
drop col: {Larva Presence} action: Drop
drop col: context action: Drop
move col: parameters position: after after: imageStatus
settype col: resultTime datetimeType: 'Datetime','yy-mm-dd hh:mm:ss','yyyy*mm*dd*HH:MM:SS' type: Datetime
settype col: resultTime datetimeType: 'Datetime','yy-mm-dd','yyyy*mm*dd' type: Datetime
drop col: {raw context 1} action: Drop
drop col: {raw context 2} action: Drop